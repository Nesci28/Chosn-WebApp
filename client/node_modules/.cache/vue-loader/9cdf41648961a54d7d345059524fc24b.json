{"remainingRequest":"/home/nos/Webapp/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nos/Webapp/client/node_modules/monaco-editor-forvue/src/Monaco.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/nos/Webapp/client/node_modules/monaco-editor-forvue/src/Monaco.vue","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\n// var debounce = require('lodash.debounce');\n// var monacoLoader = require('./MonacoLoader');\n\nimport debounce from 'lodash.debounce';\nimport monacoLoader from './MonacoLoader';\n\nexport default {\n    props: {\n        width: {\n            type: [String, Number],\n            default: '100%'\n        },\n\n        height: {\n            type: [String, Number],\n            default: '100%'\n        },\n\n        code: {\n            type: String,\n            default: '// code \\n'\n        },\n\n        srcPath: {\n            type: String\n        },\n\n        language: {\n            type: String,\n            default: 'javascript'\n        },\n\n        theme: {\n            type: String,\n            default: 'vs-dark'\n        }, // vs, hc-black\n\n        options: {\n            type: Object,\n            default: () => {}\n        },\n\n        changeThrottle: {\n            type: Number,\n            default: 0\n        }\n    },\n\n    mounted() {\n        this.fetchEditor();\n    },\n\n    destroyed() {\n        this.destroyMonaco();\n    },\n\n    computed: {\n\n        style() {\n            let { width, height } = this;\n            let fixedWidth = width.toString().indexOf('%') !== -1 ? width : `${width}px`;\n            let fixedHeight = height.toString().indexOf('%') !== -1 ? height : `${height}px`;\n\n            if(this.editor) {\n                this.editor.layout({\n                    width: fixedWidth.replace('px', ''),\n                    height: fixedHeight.replace('px', '')\n                });\n            }\n\n            return {\n                width: fixedWidth,\n                height: fixedHeight,\n            }\n        },\n\n        editorOptions() {\n            return Object.assign({}, this.defaults, this.options, {\n                value: this.code,\n                language: this.language,\n                theme: this.theme\n            })\n        }\n    },\n\n    data() {\n        return {\n            defaults: {\n                selectOnLineNumbers: true,\n                roundedSelection: false,\n                readOnly: false,\n                cursorStyle: 'line',\n                automaticLayout: false,\n                glyphMargin: false,\n                folding: true\n            }\n        }\n    },\n\n    watch: {\n\n        language () {\n            window.monaco.editor.setModelLanguage(this.editor.getModel(), this.language)\n        }\n    },\n\n    methods: {\n\n        editorHasLoaded(editor, monaco) {\n\n            this.editor = editor;\n            this.monaco = monaco;\n\n            this.editor.onDidChangeModelContent(event => this.codeChangeHandler(editor, event));\n\n            this.$emit('mounted', editor);\n        },\n\n        codeChangeHandler: function(editor) {\n\n            if (this.codeChangeEmitter) {\n                this.codeChangeEmitter(editor);\n            } else {\n\n                this.codeChangeEmitter = debounce(\n                    function(editor) {\n                        this.$emit('codeChange', editor);\n                    },\n                    this.changeThrottle\n                );\n\n                this.codeChangeEmitter(editor);\n            }\n        },\n\n        fetchEditor() {\n            monacoLoader.load(this.srcPath, this.createMonaco);\n        },\n\n        createMonaco() {\n            this.editor = window.monaco.editor.create(this.$el, this.editorOptions);\n            this.editorHasLoaded(this.editor, window.monaco);\n        },\n\n        destroyMonaco() {\n\n            if (typeof this.editor !== 'undefined') {\n                this.editor.dispose();\n            }\n        }\n    }\n};\n",{"version":3,"sources":["Monaco.vue"],"names":[],"mappings":";;;;;AAKA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Monaco.vue","sourceRoot":"node_modules/monaco-editor-forvue/src","sourcesContent":["<template>\n  <div :style=\"style\"></div>\n</template>\n\n<script>\n// var debounce = require('lodash.debounce');\n// var monacoLoader = require('./MonacoLoader');\n\nimport debounce from 'lodash.debounce';\nimport monacoLoader from './MonacoLoader';\n\nexport default {\n    props: {\n        width: {\n            type: [String, Number],\n            default: '100%'\n        },\n\n        height: {\n            type: [String, Number],\n            default: '100%'\n        },\n\n        code: {\n            type: String,\n            default: '// code \\n'\n        },\n\n        srcPath: {\n            type: String\n        },\n\n        language: {\n            type: String,\n            default: 'javascript'\n        },\n\n        theme: {\n            type: String,\n            default: 'vs-dark'\n        }, // vs, hc-black\n\n        options: {\n            type: Object,\n            default: () => {}\n        },\n\n        changeThrottle: {\n            type: Number,\n            default: 0\n        }\n    },\n\n    mounted() {\n        this.fetchEditor();\n    },\n\n    destroyed() {\n        this.destroyMonaco();\n    },\n\n    computed: {\n\n        style() {\n            let { width, height } = this;\n            let fixedWidth = width.toString().indexOf('%') !== -1 ? width : `${width}px`;\n            let fixedHeight = height.toString().indexOf('%') !== -1 ? height : `${height}px`;\n\n            if(this.editor) {\n                this.editor.layout({\n                    width: fixedWidth.replace('px', ''),\n                    height: fixedHeight.replace('px', '')\n                });\n            }\n\n            return {\n                width: fixedWidth,\n                height: fixedHeight,\n            }\n        },\n\n        editorOptions() {\n            return Object.assign({}, this.defaults, this.options, {\n                value: this.code,\n                language: this.language,\n                theme: this.theme\n            })\n        }\n    },\n\n    data() {\n        return {\n            defaults: {\n                selectOnLineNumbers: true,\n                roundedSelection: false,\n                readOnly: false,\n                cursorStyle: 'line',\n                automaticLayout: false,\n                glyphMargin: false,\n                folding: true\n            }\n        }\n    },\n\n    watch: {\n\n        language () {\n            window.monaco.editor.setModelLanguage(this.editor.getModel(), this.language)\n        }\n    },\n\n    methods: {\n\n        editorHasLoaded(editor, monaco) {\n\n            this.editor = editor;\n            this.monaco = monaco;\n\n            this.editor.onDidChangeModelContent(event => this.codeChangeHandler(editor, event));\n\n            this.$emit('mounted', editor);\n        },\n\n        codeChangeHandler: function(editor) {\n\n            if (this.codeChangeEmitter) {\n                this.codeChangeEmitter(editor);\n            } else {\n\n                this.codeChangeEmitter = debounce(\n                    function(editor) {\n                        this.$emit('codeChange', editor);\n                    },\n                    this.changeThrottle\n                );\n\n                this.codeChangeEmitter(editor);\n            }\n        },\n\n        fetchEditor() {\n            monacoLoader.load(this.srcPath, this.createMonaco);\n        },\n\n        createMonaco() {\n            this.editor = window.monaco.editor.create(this.$el, this.editorOptions);\n            this.editorHasLoaded(this.editor, window.monaco);\n        },\n\n        destroyMonaco() {\n\n            if (typeof this.editor !== 'undefined') {\n                this.editor.dispose();\n            }\n        }\n    }\n};\n</script>\n"]}]}