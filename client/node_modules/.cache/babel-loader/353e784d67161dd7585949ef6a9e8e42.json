{"remainingRequest":"/home/nos/Webapp/client/node_modules/thread-loader/dist/cjs.js!/home/nos/Webapp/client/node_modules/babel-loader/lib/index.js!/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nos/Webapp/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nos/Webapp/client/src/views/Rigs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/nos/Webapp/client/src/views/Rigs.vue","mtime":1555937158150},{"path":"/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/nos/Webapp/client/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar axios = require('axios');\n\naxios.defaults.withCredentials = true;\nexport default {\n  name: 'App',\n  data: function data() {\n    return {\n      urlGet: 'https://nos-server.now.sh/db/',\n      urlCommand: 'https://nos-server.now.sh/rig/command/',\n      urlDelete: 'https://nos-server.now.sh/rig/delete/',\n      // urlGet: \"http://localhost:5000/db\",\n      // urlCommand: 'http://localhost:5000/rig/command/',\n      // urlDelete: 'http://localhost:5000/rig/delete/',\n      i: 0,\n      disableSwitch: [],\n      deleteHostname: null,\n      coin: [],\n      algo: [],\n      timeDifference: [],\n      rigNumber: [],\n      testRigNumber: [],\n      rigSeen: [],\n      rigHostname: [],\n      rigStatus: [],\n      rigBrand: [],\n      rigSSH: [],\n      counter: 1,\n      hashrateNvidia: [],\n      hashrateAmd: [],\n      temperatureNvidia: [],\n      temperatureAmd: [],\n      wattNvidia: [],\n      wattAmd: [],\n      gpuNumberNvidia: [],\n      gpuUtilizationNvidia: [],\n      gpuHashrateNvidia: [],\n      gpuTemperatureNvidia: [],\n      gpuWattNvidia: [],\n      gpuCClockNvidia: [],\n      gpuMClockNvidia: [],\n      gpuNameNvidia: [],\n      gpuNumberAmd: [],\n      gpuUtilizationAmd: [],\n      gpuHashrateAmd: [],\n      gpuTemperatureAmd: [],\n      gpuWattAmd: [],\n      gpuCClockAmd: [],\n      gpuMClockAmd: [],\n      gpuNameAmd: [],\n      brand: undefined,\n      gpuDialog: false,\n      rigGraph: false,\n      deleteCard: false,\n      confirmText: '',\n      key: 0,\n      editList: [\"System\", \"Coins\", \"Overclocks\"],\n      logsList: [\"Miners\"],\n      actionList: [\"SSH\", \"Restart nOS\", \"Restart Rig\", \"Shutdown Rig\"],\n      APITimer: undefined\n    };\n  },\n  methods: {\n    btnDelete: function btnDelete(hostname) {\n      this.deleteCard = !this.deleteCard;\n      this.confirmText = '';\n      this.deleteHostname = hostname;\n    },\n    deleteRig: function () {\n      var _deleteRig = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.post(this.urlDelete, {\n                  \"hostname\": this.deleteHostname\n                });\n\n              case 2:\n                window.location.reload();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function deleteRig() {\n        return _deleteRig.apply(this, arguments);\n      }\n\n      return deleteRig;\n    }(),\n    createCmdObject: function createCmdObject(hostname, cmd) {\n      return {\n        \"hostname\": hostname,\n        \"command\": cmd\n      };\n    },\n    action: function action(index, hostname) {\n      if (index == 0) {\n        var win = window.open(this.rigSSH, '_noblank');\n        win.focus();\n      } else if (index == 1) {\n        axios.post(this.urlCommand, this.createCmdObject(hostname, 'start'));\n      } else if (index == 2) {\n        axios.post(this.urlCommand, this.createCmdObject(hostname, 'sudo shutdown -r now'));\n      } else if (index == 2) {\n        axios.post(this.urlCommand, this.createCmdObject(hostname, 'sudo shutdown now'));\n      }\n    },\n    hashrateOver: function hashrateOver(brand, key) {\n      this.gpuDialog = !this.gpuDialog;\n\n      if (brand == \"nvidia\") {\n        this.brand = \"Nvidia\";\n        this.key = key;\n      } else {\n        this.brand = \"Amd\";\n        this.key = key;\n      }\n    },\n    rigNames: function rigNames(response) {\n      this.rigHostname = new Set();\n      this.rigNumber = [];\n\n      for (var i = 0; i < response.length; i++) {\n        this.rigHostname.add(response[i].Hostname);\n        this.rigSSH = response[i].Shellinabox;\n        this.rigNumber.push(i + 1);\n      }\n    },\n    rigTimes: function rigTimes(response) {\n      for (var i = 0; i < response.length; i++) {\n        var now = +new Date();\n        this.timeDifference[i] = now - response[i][\"New Time\"];\n\n        if (this.timeDifference[i] < 1 * 60 * 1000) {\n          this.rigStatus[i] = true;\n          this.rigSeen[i] = \"< 30 secs\";\n        } else {\n          this.rigStatus[i] = false;\n          var time = this.timeDifference[i];\n          time = Math.round(time / 1000 / 60);\n          this.rigSeen[i] = \"> \" + time + \" mins\";\n        }\n      }\n    },\n    rigGPU: function rigGPU(response) {\n      for (var i = 0; i < response.length; i++) {\n        if (Object.keys(response[i].Nvidia.GPU).length > 0 && Object.keys(response[i].Amd.GPU).length > 0) {\n          this.rigBrand[i] = [\"Nvidia\", \"Amd\"];\n          this.gpuNumberNvidia[i] = response[i].Nvidia.GPU.length;\n          this.gpuNumberAmd[i] = response[i].Amd.GPU.length;\n          this.coin[i] = [response[i].Nvidia.Coin, response[i].Amd.Coin];\n          this.algo[i] = [response[i].Nvidia.Algo, response[i].Amd.Algo];\n          this.getGpuInfo(i, \"Nvidia\", response);\n          this.getGpuInfo(i, \"Amd\", response);\n        } else if (Object.keys(response[i].Nvidia.GPU).length > 0) {\n          this.rigBrand[i] = \"Nvidia\";\n          this.gpuNumberNvidia[i] = response[i].Nvidia.GPU.length;\n          this.coin[i] = [response[i].Nvidia.Coin];\n          this.algo[i] = [response[i].Nvidia.Algo];\n          this.getGpuInfo(i, \"Nvidia\", response);\n        } else if (Object.keys(response[i].Amd.GPU).length > 0) {\n          this.rigBrand[i] = \"Amd\";\n          this.gpuNumberAmd[i] = response[i].Amd.GPU.length;\n          this.coin[i] = [\"\", response[i].Amd.Coin];\n          this.algo[i] = [\"\", response[i].Amd.Algo];\n          this.getGpuInfo(i, \"Amd\", response);\n        }\n      }\n    },\n    rigInfo: function () {\n      var _rigInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.post(this.urlGet);\n\n              case 2:\n                response = _context2.sent;\n                console.log(response.data);\n                this.rigNames(response.data);\n                this.rigTimes(response.data);\n                this.rigGPU(response.data);\n                this.rigHostname = Array.from(this.rigHostname);\n                this.APITimer = setTimeout(this.rigInfo, 30000); // this.APITimer = setTimeout(this.rigInfo, 5000)\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function rigInfo() {\n        return _rigInfo.apply(this, arguments);\n      }\n\n      return rigInfo;\n    }(),\n    gpuInfo: function gpuInfo(response, i, brand) {\n      var gpuHashTemp = [];\n      var gpuTempTemp = [];\n      var gpuWattTemp = [];\n      var gpuNameTemp = [];\n\n      for (var j = 0; j < response[i][brand].GPU.length; j++) {\n        gpuHashTemp.push(response[i][brand].GPU[j].Hashrate);\n        gpuTempTemp.push(response[i][brand].GPU[j].Temperature);\n        gpuWattTemp.push(response[i][brand].GPU[j].Watt);\n        gpuNameTemp.push(response[i][brand].GPU[j].Name.replace(/GeForce GTX/, ''));\n      }\n\n      return {\n        \"gpuHashTemp\": gpuHashTemp,\n        \"gpuTempTemp\": gpuTempTemp,\n        \"gpuWattTemp\": gpuWattTemp,\n        \"gpuNameTemp\": gpuNameTemp\n      };\n    },\n    getGpuInfo: function getGpuInfo(i, brand, response) {\n      if (brand == \"Nvidia\") {\n        var gpuInformations = this.gpuInfo(response, i, 'Nvidia');\n        this.hashrateNvidia[i] = response[i].Nvidia[\"Total Hashrate\"];\n        this.temperatureNvidia[i] = response[i].Nvidia[\"Avg Temperature\"];\n        this.wattNvidia[i] = response[i].Nvidia[\"Total Watt\"];\n        this.gpuHashrateNvidia[i] = gpuInformations.gpuHashTemp;\n        this.gpuTemperatureNvidia[i] = gpuInformations.gpuTempTemp;\n        this.gpuWattNvidia[i] = gpuInformations.gpuWattTemp;\n        this.gpuNameNvidia[i] = gpuInformations.gpuNameTemp; // console.log(this.gpuHashrateNvidia, this.gpuTemperatureNvidia, this.gpuWattNvidia, this.gpuNameNvidia)\n      } else {\n        var _gpuInformations = this.gpuInfo(response, i, 'Amd');\n\n        this.hashrateAmd[i] = response[i].Amd[\"Total Hashrate\"];\n        this.temperatureAmd[i] = response[i].Amd[\"Avg Temperature\"];\n        this.wattAmd[i] = response[i].Amd[\"Total Watt\"];\n        this.gpuHashrateAmd[i] = _gpuInformations.gpuHashTemp;\n        this.gpuTemperatureAmd[i] = _gpuInformations.gpuTempTemp;\n        this.gpuWattAmd[i] = _gpuInformations.gpuWattTemp;\n        this.gpuNameAmd[i] = _gpuInformations.gpuNameTemp; // console.log(this.gpuHashrateAmd, this.gpuTemperatureAmd, this.gpuWattAmd, this.gpuNameAmd)\n      }\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    axios.post(this.urlGet).then(function (res) {\n      if (res.data == \"not logged in!\") _this.$router.push('/');else {\n        _this.rigInfo();\n      }\n    });\n  },\n  destroyed: function destroyed() {\n    clearTimeout(this.APITimer);\n  }\n};",{"version":3,"sources":["Rigs.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-app>\n    <div class=\"background\"></div>\n    <div class=\"content\">\n      <v-layout class=\"pt-5\" row wrap>\n        <v-flex xs16 sm16 md6 lg6 v-for=\"rig in rigNumber\" :key=\"rig\" pa-4>\n          \n          <v-card v-bind:class=\"{ flashingCard: !rigStatus[rig - 1] && !disableSwitch[rig - 1] }\" v-model=\"rigHostname[rig - 1]\" class=\"fade-in rounded-card rigCard\" height=\"100%\" top=\"30%\">  \n            <h1 @click=\"rigGraph=!rigGraph\" v-bind:class=\"{ redText: !rigStatus[rig - 1] && !disableSwitch[rig - 1] }\" class=\"textColor pl-3\" style=\"text-align:left;float:left;\">{{ rigHostname[rig - 1] }}</h1> \n            <v-switch\n              style=\"text-align:left;float:left;\"\n              v-if='!rigStatus[rig - 1]'\n              v-model=\"disableSwitch[rig - 1]\"\n              color=\"red\"\n              height=0.01\n              class=\"lastSeen mt-3 ml-5\"\n              dark\n            ></v-switch>\n            <h2 v-if='!rigStatus[rig - 1]' class=\"white--text pt-1 pr-3\" style=\"text-align:right;float:right;\">{{ rigSeen[rig - 1] }} ago</h2> \n            <hr style=\"clear:both;\" color=\"#F0E296\"/>\n            \n            <div>\n              <ul v-if='rigBrand[rig - 1].includes(\"Nvidia\")' style=\"cursor: pointer\" class=\"rigUlGreen white--text\">\n                <li class=\"rigLi\" @click='hashrateOver(\"nvidia\")'>\n                  <img src=\"../assets/nvidia.png\" height=\"30\" class=\"pt-2\" fill-height>\n                </li>\n                <li class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>{{ coin[rig - 1][0] }}</li>\n                <li class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>{{ algo[rig - 1][0] }}</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>{{ hashrateNvidia[rig - 1] }}</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>{{ parseInt(temperatureNvidia[rig - 1]) }} °C</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>{{ parseInt(wattNvidia[rig - 1]) }} W</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n              </ul>\n              <v-divider color=\"#F0E296\"></v-divider>\n              <ul v-if='rigBrand[rig - 1].includes(\"Amd\")' style=\"cursor: pointer\"  class=\"rigUlRed white--text\">\n                <li class=\"rigLi\" @click='hashrateOver(\"amd\")'>\n                  <img src=\"../assets/amd.png\" height=\"30\" class=\"pt-2\" fill-height>\n                </li>\n                <li class=\"rigLi\" @click='hashrateOver(\"amd\", rig)'>{{ coin[rig - 1][1] }}</li>\n                <li class=\"rigLi\" @click='hashrateOver(\"amd\", rig)'>{{ algo[rig - 1][1] }}</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"amd\", rig)'>{{ hashrateAmd[rig - 1] }}</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"amd\", rig)'>{{ parseInt(temperatureAmd[rig - 1]) }} °C</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"amd\", rig)'>{{ parseInt(wattAmd[rig - 1]) }} W</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n              </ul>\n              <v-divider color=\"#F0E296\"></v-divider>\n\n              <div class=\"pt-2\">\n                <v-menu offset-y>\n                  <v-btn slot=\"activator\" color=\"transparent\" class=\"white--text editBtn\">Edit</v-btn>\n                  <v-list dark>\n                    <v-list-tile\n                      v-for=\"(item, index) in editList\"\n                      :key=\"index\"\n                      :to=\"{ name: 'Edit' + item, params: { id: rigHostname[rig - 1] } }\"\n                    >\n                      <v-list-tile-title>{{ item }}</v-list-tile-title>\n                    </v-list-tile>\n                  </v-list>\n                </v-menu>\n                <v-menu offset-y>\n                  <v-btn slot=\"activator\" color=\"transparent\" class=\"white--text editBtn\">Logs</v-btn>\n                  <v-list dark>\n                    <v-list-tile\n                      v-for=\"(item, index) in logsList\"\n                      :key=\"index\"\n                      :to=\"{ name: 'logs', params: { id: rigHostname[rig - 1] } }\"\n                    >\n                      <v-list-tile-title>{{ item }}</v-list-tile-title>\n                    </v-list-tile>\n                  </v-list>\n                </v-menu>\n                <v-menu offset-y>\n                  <v-btn slot=\"activator\" color=\"transparent\" class=\"white--text editBtn\">Actions</v-btn>\n                  <v-list dark>\n                    <v-list-tile\n                      v-for=\"(item, index) in actionList\"\n                      :key=\"index\"\n                      @click=\"action(index, rigHostname[rig - 1])\"\n                    >\n                      <v-list-tile-title>{{ item }}</v-list-tile-title>\n                    </v-list-tile>\n                  </v-list>\n                </v-menu>\n                <v-btn @click=\"rigGraph = !rigGraph\" color=\"transparent\" class=\"white--text editBtn\">View Graphs</v-btn>\n                <v-btn @click=\"btnDelete(rigHostname[rig - 1])\" color=\"error\" class=\"black--text editBtn\">Delete</v-btn>\n              </div>\n            </div>\n          </v-card>\n\n        </v-flex>\n      </v-layout>\n      \n      <v-flex xs16 sm16 md6 lg6>\n        <v-dialog v-model=\"deleteCard\" width=\"75%\">\n          <v-card class=\"infoCard rounded-card\">\n            <v-card-title class=\"red--text headline lighten-2 cardTitle\" primary-title>\n            Delete this rig ?\n            </v-card-title>\n            <v-text-field\n                class=\"confirmBox pr-5 pl-5 pt-5\"\n                color=\"white\"\n                label=\"Write 'DELETE' to confirm\"\n                v-model=\"confirmText\"\n                outline\n              ></v-text-field>\n              <v-btn @click=\"deleteRig\" v-if=\"confirmText == 'DELETE'\" color=\"warning\" class=\"deleteBtn\">Confirm</v-btn>\n          </v-card>      \n        </v-dialog>\n      </v-flex>\n\n      <v-flex xs16 sm16 md6 lg6>\n        <v-dialog v-model=\"gpuDialog\" width=\"75%\">\n          <v-card class=\"infoCard rounded-card\">\n            <v-card-title v-if='brand==\"Nvidia\"' class=\"green--text headline lighten-2 cardTitle\" primary-title>\n            {{ brand }}\n            </v-card-title>\n            <v-card-title v-if='brand==\"Amd\"' class=\"red--text headline lighten-2 cardTitle\" primary-title>\n            {{ brand }}\n            </v-card-title>\n            <ul class=\"white--text gpuUl\">\n              <li class=\"gpuLi\">GPU #</li>\n              <li class=\"gpuLi\">hashrate</li>\n              <li class=\"gpuLi\">temperature</li>\n              <li class=\"gpuLi\">watt</li>\n              <li class=\"gpuLi\">name</li>                \n            </ul>\n            <v-divider color=\"#F0E296\"></v-divider>\n\n            <div v-if='brand==\"Nvidia\"'>\n              <ul v-for=\"i in gpuNumberNvidia[key - 1]\" :key=\"i\" class=\"white--text gpuUl\">\n                <li class=\"gpuLi\">{{ i }}</li>\n                <li class=\"gpuLi\">{{ gpuHashrateNvidia[key - 1][i - 1] || \"undefined\" }}</li>\n                <li class=\"gpuLi\">{{ Number(gpuTemperatureNvidia[key - 1][i - 1]).toFixed(0) || \"undefined\" }} °C</li>\n                <li class=\"gpuLi\">{{ gpuWattNvidia[key - 1][i - 1] || \"undefined\" }}</li>\n                <li class=\"gpuLi\">{{ gpuNameNvidia[key - 1][i - 1] || \"undefined\" }}</li>                \n              </ul>\n            </div>\n            <div v-if='brand==\"Amd\"'>\n              <ul v-for=\"i in gpuNumberAmd[key - 1]\" :key=\"i\" class=\"white--text gpuUl\">\n                <li class=\"gpuLi\">{{ i }}</li>\n                <li class=\"gpuLi\">{{ Number(gpuTemperatureAmd[key - 1][i - 1]).toFixed(0) || \"undefined\" }} °C</li>\n                <li class=\"gpuLi\">{{ gpuHashrateAmd[key - 1][i - 1] || \"undefined\" }}</li>\n                <li class=\"gpuLi\">{{ gpuWattAmd[key - 1][i - 1] || \"undefined\" }} W</li>\n                <li class=\"gpuLi\">{{ gpuNameAmd[key - 1][i - 1] || \"undefined\" }}</li>\n              </ul>\n            </div>\n          </v-card>      \n        </v-dialog>\n      </v-flex>\n\n      <v-flex xs16 sm16 md6 lg6>\n        <v-dialog v-model=\"rigGraph\" width=\"75%\">\n          <v-card class=\"infoCard rounded-card\">\n            <h1 class=\"white--text\">Grafana Graphs</h1>\n          </v-card>      \n        </v-dialog>\n      </v-flex>\n\n    </div>\n  </v-app>\n</template>\n\n<script>\nconst axios = require('axios');\naxios.defaults.withCredentials = true\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      urlGet: 'https://nos-server.now.sh/db/',\n      urlCommand: 'https://nos-server.now.sh/rig/command/',\n      urlDelete: 'https://nos-server.now.sh/rig/delete/',\n      // urlGet: \"http://localhost:5000/db\",\n      // urlCommand: 'http://localhost:5000/rig/command/',\n      // urlDelete: 'http://localhost:5000/rig/delete/',\n      i: 0,\n      disableSwitch: [],\n      deleteHostname: null,\n\n      coin: [],\n      algo: [],\n      timeDifference: [],\n      rigNumber: [],\n      testRigNumber: [],\n      rigSeen: [],\n      rigHostname: [],\n      rigStatus: [],\n      rigBrand: [],\n      rigSSH: [],\n      counter: 1,\n\n      hashrateNvidia: [],\n      hashrateAmd: [],\n      temperatureNvidia: [],\n      temperatureAmd: [],\n      wattNvidia: [],\n      wattAmd: [],\n      \n      gpuNumberNvidia: [],\n      gpuUtilizationNvidia: [],\n      gpuHashrateNvidia: [],\n      gpuTemperatureNvidia: [], \n      gpuWattNvidia: [], \n      gpuCClockNvidia: [], \n      gpuMClockNvidia: [],\n      gpuNameNvidia: [],\n\n      gpuNumberAmd: [],\n      gpuUtilizationAmd: [],\n      gpuHashrateAmd: [],\n      gpuTemperatureAmd: [], \n      gpuWattAmd: [], \n      gpuCClockAmd: [], \n      gpuMClockAmd: [], \n      gpuNameAmd: [],\n\n      brand: undefined,\n      gpuDialog: false,\n      rigGraph: false,\n      deleteCard: false,\n      confirmText: '',\n      key: 0,\n\n      editList: [\"System\", \"Coins\", \"Overclocks\"],\n      logsList: [\"Miners\"],\n      actionList: [\"SSH\", \"Restart nOS\", \"Restart Rig\", \"Shutdown Rig\"],\n\n      APITimer: undefined\n    };\n  },\n  methods: {\n    btnDelete(hostname) {\n      this.deleteCard = !this.deleteCard\n      this.confirmText = ''\n      this.deleteHostname = hostname\n    },\n    async deleteRig() {\n      await axios.post(this.urlDelete, {\n        \"hostname\": this.deleteHostname\n      })\n      window.location.reload()\n    },\n    createCmdObject(hostname, cmd) {\n      return {\n        \"hostname\": hostname,\n        \"command\": cmd\n      }\n    },\n    action(index, hostname) {\n      if (index == 0) {\n        let win = window.open(this.rigSSH, '_noblank')\n        win.focus()\n      } else if (index == 1) {\n        axios.post(this.urlCommand, this.createCmdObject(hostname, 'start'))\n      } else if (index == 2) {\n        axios.post(this.urlCommand, this.createCmdObject(hostname, 'sudo shutdown -r now'))\n      } else if (index == 2) {\n        axios.post(this.urlCommand, this.createCmdObject(hostname, 'sudo shutdown now'))\n      }\n    },\n    hashrateOver(brand, key) {\n      this.gpuDialog = !this.gpuDialog\n      if (brand == \"nvidia\") {\n        this.brand = \"Nvidia\"\n        this.key = key\n      } else {\n        this.brand = \"Amd\"\n        this.key = key\n      }\n    },\n    rigNames(response) {\n      this.rigHostname = new Set()\n      this.rigNumber = []\n      for (let i = 0; i < response.length; i++) {\n        this.rigHostname.add(response[i].Hostname)\n        this.rigSSH = response[i].Shellinabox\n        this.rigNumber.push(i + 1)\n      }\n    },\n    rigTimes(response) {\n      for (let i = 0; i < response.length; i++) {\n        let now = + new Date()\n        this.timeDifference[i] = now - response[i][\"New Time\"]\n        if (this.timeDifference[i] < 1 * 60 * 1000) {\n          this.rigStatus[i] = true\n          this.rigSeen[i] = \"< 30 secs\"\n        } else {\n          this.rigStatus[i] = false\n          let time = this.timeDifference[i]\n          time = Math.round(time / 1000 / 60)\n          this.rigSeen[i] = \"> \" + time + \" mins\"\n        }\n      }\n    },\n    rigGPU(response) {\n      for (let i = 0; i < response.length; i++) {\n        if (Object.keys(response[i].Nvidia.GPU).length > 0 && Object.keys(response[i].Amd.GPU).length > 0) {\n          this.rigBrand[i] = [\"Nvidia\", \"Amd\"]\n          this.gpuNumberNvidia[i] = response[i].Nvidia.GPU.length\n          this.gpuNumberAmd[i] = response[i].Amd.GPU.length\n          this.coin[i] = [response[i].Nvidia.Coin, response[i].Amd.Coin]\n          this.algo[i] = [response[i].Nvidia.Algo, response[i].Amd.Algo]\n          this.getGpuInfo(i, \"Nvidia\", response)\n          this.getGpuInfo(i, \"Amd\", response)\n        } else if (Object.keys(response[i].Nvidia.GPU).length > 0) {\n          this.rigBrand[i] = \"Nvidia\"\n          this.gpuNumberNvidia[i] = response[i].Nvidia.GPU.length\n          this.coin[i] = [response[i].Nvidia.Coin]\n          this.algo[i] = [response[i].Nvidia.Algo]\n          this.getGpuInfo(i, \"Nvidia\", response)\n        } else if (Object.keys(response[i].Amd.GPU).length > 0) {\n          this.rigBrand[i] = \"Amd\"\n          this.gpuNumberAmd[i] = response[i].Amd.GPU.length\n          this.coin[i] = [\"\", response[i].Amd.Coin]\n          this.algo[i] = [\"\", response[i].Amd.Algo]\n          this.getGpuInfo(i, \"Amd\", response)\n        }\n      }\n    },\n    async rigInfo() {\n      let response = await axios.post(this.urlGet)\n      console.log(response.data)\n\n      this.rigNames(response.data)\n      this.rigTimes(response.data)\n      this.rigGPU(response.data)\n\n      this.rigHostname = Array.from(this.rigHostname)\n\n      this.APITimer = setTimeout(this.rigInfo, 30000)\n      // this.APITimer = setTimeout(this.rigInfo, 5000)\n    },\n    gpuInfo(response, i, brand) {\n      let gpuHashTemp = []\n      let gpuTempTemp = []\n      let gpuWattTemp = []\n      let gpuNameTemp = []\n      for (let j = 0; j < response[i][brand].GPU.length; j++) {\n        gpuHashTemp.push(response[i][brand].GPU[j].Hashrate)\n        gpuTempTemp.push(response[i][brand].GPU[j].Temperature)\n        gpuWattTemp.push(response[i][brand].GPU[j].Watt)\n        gpuNameTemp.push((response[i][brand].GPU[j].Name).replace(/GeForce GTX/, ''))   \n      }\n      return {\n        \"gpuHashTemp\": gpuHashTemp,\n        \"gpuTempTemp\": gpuTempTemp,\n        \"gpuWattTemp\": gpuWattTemp,\n        \"gpuNameTemp\": gpuNameTemp\n      }\n    },\n    getGpuInfo(i, brand, response) {\n      if (brand == \"Nvidia\") {      \n        let gpuInformations = this.gpuInfo(response, i, 'Nvidia')\n\n        this.hashrateNvidia[i] = response[i].Nvidia[\"Total Hashrate\"]\n        this.temperatureNvidia[i] = response[i].Nvidia[\"Avg Temperature\"]\n        this.wattNvidia[i] = response[i].Nvidia[\"Total Watt\"]\n        this.gpuHashrateNvidia[i] = gpuInformations.gpuHashTemp\n        this.gpuTemperatureNvidia[i] = gpuInformations.gpuTempTemp\n        this.gpuWattNvidia[i] = gpuInformations.gpuWattTemp\n        this.gpuNameNvidia[i] = gpuInformations.gpuNameTemp\n        // console.log(this.gpuHashrateNvidia, this.gpuTemperatureNvidia, this.gpuWattNvidia, this.gpuNameNvidia)\n      } else {\n        let gpuInformations = this.gpuInfo(response, i, 'Amd')\n\n        this.hashrateAmd[i] = response[i].Amd[\"Total Hashrate\"]\n        this.temperatureAmd[i] = response[i].Amd[\"Avg Temperature\"]\n        this.wattAmd[i] = response[i].Amd[\"Total Watt\"]\n        this.gpuHashrateAmd[i] = gpuInformations.gpuHashTemp\n        this.gpuTemperatureAmd[i] = gpuInformations.gpuTempTemp\n        this.gpuWattAmd[i] = gpuInformations.gpuWattTemp\n        this.gpuNameAmd[i] = gpuInformations.gpuNameTemp\n        // console.log(this.gpuHashrateAmd, this.gpuTemperatureAmd, this.gpuWattAmd, this.gpuNameAmd)\n      }\n    }\n  },\n  created() {\n    axios.post(this.urlGet)\n      .then(res => {\n        if (res.data == \"not logged in!\") this.$router.push('/')\n        else {\n          this.rigInfo()\n        }\n      })\n  },\n  destroyed() {\n    clearTimeout(this.APITimer);\n  }\n}\n\n</script>\n\n<style scoped>\n.deleteBtn{\n  margin-left: 4%;\n}\n.confirmBox{\n  color: white;\n}\n.cardTitle{\n  background-color: black;\n}\n.textColor{\n  color: white;\n}\n.editBtn{\n  top: -5px;\n  left: 10px\n}\n.infoCard {\n  margin-left: auto;\n  margin-right: auto;\n}\n.rounded-card {\n  background-color: rgb(46, 46, 46);\n  border-radius:30px;\n}\n.rigCard{\n  border: 5px solid rgb(240, 226, 150);\n  background:rgba(255,255,255,0.10);\n}\n.rigCard:hover{\n  box-shadow: 0 28px 36px rgba(240, 226, 150,0.25), 0 10px 10px rgba(240, 226, 150,0.22);\n}\n.gpuUl {\n  /* background: black; */\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  display: table;\n}\n.gpuLi {\n  width: 20%;\n  text-decoration: none;\n  letter-spacing: 0.10em;\n  display: inline-block;\n  padding: 2px 15px;\n  position: relative;\n  color: white;\n}\n.rigUlGreen {\n  z-index: 9999;\n  display: table;\n  margin: 0;\n}\n.rigUlGreen:hover { \n  width: 100%;\n  background-color: rgba(154, 205, 50, 0.5); \n}\n.rigUlRed {\n  z-index: 9999;\n  display: table;\n  margin: 0;\n}\n.rigUlRed:hover { \n  width: 100%;\n  background-color: rgba(223, 3, 3, 0.5); \n}\n.rigLi {\n  text-decoration: none;\n  width: 80px;\n  display: inline-block;\n  position: relative;\n  text-align: center;\n}\n.span-text {\n  vertical-align:50%;\n}\n\n.fade-in {\n\t-webkit-animation: fade-in 1.2s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\n\t        animation: fade-in 1.2s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\n}\n@-webkit-keyframes fade-in {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes fade-in {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n.redText{\n  animation: flashingRed 1s infinite;\n}\n@keyframes flashingRed {\n  0% { color: red; }\n  25% { color: white; }\n  50% { color: red; }\n  75% { color: white; }\n  100% { color: red; }\n\n}\n.flashingCard {\n\t-webkit-animation: vibrate-1 0.3s linear infinite both;\n\t        animation: vibrate-1 0.3s linear infinite both;\n}\n@-webkit-keyframes vibrate-1 {\n  0% {\n    -webkit-transform: translate(0);\n            transform: translate(0);\n  }\n  20% {\n    -webkit-transform: translate(-2px, 2px);\n            transform: translate(-2px, 2px);\n  }\n  40% {\n    -webkit-transform: translate(-2px, -2px);\n            transform: translate(-2px, -2px);\n  }\n  60% {\n    -webkit-transform: translate(2px, 2px);\n            transform: translate(2px, 2px);\n  }\n  80% {\n    -webkit-transform: translate(2px, -2px);\n            transform: translate(2px, -2px);\n  }\n  100% {\n    -webkit-transform: translate(0);\n            transform: translate(0);\n  }\n}\n@keyframes vibrate-1 {\n  0% {\n    -webkit-transform: translate(0);\n            transform: translate(0);\n  }\n  20% {\n    -webkit-transform: translate(-2px, 2px);\n            transform: translate(-2px, 2px);\n  }\n  40% {\n    -webkit-transform: translate(-2px, -2px);\n            transform: translate(-2px, -2px);\n  }\n  60% {\n    -webkit-transform: translate(2px, 2px);\n            transform: translate(2px, 2px);\n  }\n  80% {\n    -webkit-transform: translate(2px, -2px);\n            transform: translate(2px, -2px);\n  }\n  100% {\n    -webkit-transform: translate(0);\n            transform: translate(0);\n  }\n}\n</style>\n\n"],"sourceRoot":"src/views"}]}