{"remainingRequest":"/home/nos/Webapp/client/node_modules/thread-loader/dist/cjs.js!/home/nos/Webapp/client/node_modules/babel-loader/lib/index.js!/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nos/Webapp/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nos/Webapp/client/src/views/Rigs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/nos/Webapp/client/src/views/Rigs.vue","mtime":1555114387917},{"path":"/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar axios = require('axios');\n\nexport default {\n  name: 'App',\n  data: function data() {\n    return {\n      url: 'https://nos-server.now.sh/db/',\n      i: 0,\n      disableSwitch: [],\n      coin: [],\n      algo: [],\n      timeDifference: [],\n      rigNumber: [],\n      rigSeen: [],\n      rigHostname: [],\n      rigStatus: [],\n      rigBrand: [],\n      rigSSH: null,\n      hashrateNvidia: [],\n      hashrateAmd: [],\n      temperatureNvidia: [],\n      temperatureAmd: [],\n      wattNvidia: [],\n      wattAmd: [],\n      gpuNumberNvidia: [],\n      gpuUtilizationNvidia: [],\n      gpuHashrateNvidia: [],\n      gpuTemperatureNvidia: [],\n      gpuWattNvidia: [],\n      gpuCClockNvidia: [],\n      gpuMClockNvidia: [],\n      gpuNameNvidia: [],\n      gpuNumberAmd: [],\n      gpuUtilizationAmd: [],\n      gpuHashrateAmd: [],\n      gpuTemperatureAmd: [],\n      gpuWattAmd: [],\n      gpuCClockAmd: [],\n      gpuMClockAmd: [],\n      gpuNameAmd: [],\n      brand: undefined,\n      gpuDialog: false,\n      rigGraph: false,\n      key: 0,\n      editList: [\"System\", \"Coins\", \"Overclocks\"],\n      logsList: [\"Miners\"],\n      actionList: [\"SSH\", \"Restart nOS\", \"Restart Rig\", \"Shutdown Rig\"],\n      APITimer: undefined\n    };\n  },\n  methods: {\n    createCmdObject: function createCmdObject(hostname, cmd) {\n      return {\n        \"username\": this.$store.state.username,\n        \"password\": this.$store.state.password,\n        \"hostname\": hostname,\n        \"command\": cmd\n      };\n    },\n    action: function action(index, hostname) {\n      if (index == 0) {\n        var win = window.open(this.rigSSH, '_noblank');\n        win.focus();\n      } else if (index == 1) {\n        axios.post('http://localhost:5000/command', this.createCmdObject(hostname, 'start'));\n      } else if (index == 2) {\n        axios.post('http://localhost:5000/command', this.createCmdObject(hostname, 'sudo shutdown -r now'));\n      } else if (index == 2) {\n        axios.post('http://localhost:5000/command', this.createCmdObject(hostname, 'sudo shutdown now'));\n      }\n    },\n    hashrateOver: function hashrateOver(brand, key) {\n      this.gpuDialog = !this.gpuDialog;\n\n      if (brand == \"nvidia\") {\n        this.brand = \"Nvidia\";\n        this.key = key;\n      } else {\n        this.brand = \"Amd\";\n        this.key = key;\n      }\n    },\n    returnToDefaults: function returnToDefaults() {\n      this.timeDifference = [], this.rigNumber = [], this.rigSeen = [], this.rigHostname = [], this.rigStatus = [], this.rigBrand = [], this.rigSSH = null, this.hashrateNvidia = [], this.hashrateAmd = [], this.temperatureNvidia = [], this.temperatureAmd = [], this.wattNvidia = [], this.wattAmd = [], this.gpuNumberNvidia = [], this.gpuUtilizationNvidia = [], this.gpuHashrateNvidia = [], this.gpuTemperatureNvidia = [], this.gpuWattNvidia = [], this.gpuCClockNvidia = [], this.gpuMClockNvidia = [], this.gpuNameNvidia = [], this.gpuNumberAmd = [], this.gpuUtilizationAmd = [], this.gpuHashrateAmd = [], this.gpuTemperatureAmd = [], this.gpuWattAmd = [], this.gpuCClockAmd = [], this.gpuMClockAmd = [], this.gpuNameAmd = [], this.brand = undefined, this.gpuDialog = false;\n    },\n    rigInfo: function rigInfo() {\n      var _this = this;\n\n      this.returnToDefaults();\n      axios.get(this.url + this.$store.state.username + '/' + this.$store.state.password).then(function (response) {\n        console.log(response.data);\n        _this.rigHostname = new Set();\n\n        for (var i = 0; i < response.data.length; i++) {\n          _this.rigHostname.add(response.data[i].Hostname);\n\n          _this.rigSSH = response.data[i].Shellinabox;\n\n          _this.rigNumber.push(i + 1);\n\n          var now = +new Date();\n          _this.timeDifference[i] = now - response.data[i][\"New Time\"];\n\n          if (_this.timeDifference[i] < 1 * 60 * 1000) {\n            _this.rigStatus[i] = true;\n            _this.rigSeen[i] = \"< 30 secs\";\n          } else {\n            _this.rigStatus[i] = false;\n            var time = _this.timeDifference[i];\n            time = Math.round(time / 1000 / 60);\n            _this.rigSeen[i] = \"> \" + time + \" mins\";\n          }\n\n          if (Object.keys(response.data[i].Nvidia.GPU).length > 0 && Object.keys(response.data[i].Amd.GPU).length > 0) {\n            _this.rigBrand[i] = [\"Nvidia\", \"Amd\"];\n            _this.gpuNumberNvidia[i] = response.data[i].Nvidia.GPU.length;\n            _this.gpuNumberAmd[i] = response.data[i].Amd.GPU.length;\n            _this.coin[i] = [response.data[i].Nvidia.Coin, response.data[i].Amd.Coin];\n            _this.algo[i] = [response.data[i].Nvidia.Algo, response.data[i].Amd.Algo];\n\n            _this.getGpuInfo(i, \"Nvidia\", response);\n\n            _this.getGpuInfo(i, \"Amd\", response);\n          } else if (Object.keys(response.data[i].Nvidia.GPU).length > 0) {\n            _this.rigBrand[i] = \"Nvidia\";\n            _this.gpuNumberNvidia[i] = response.data[i].Nvidia.GPU.length;\n            _this.coin[i] = [response.data[i].Nvidia.Coin];\n            _this.algo[i] = [response.data[i].Nvidia.Algo];\n\n            _this.getGpuInfo(i, \"Nvidia\", response);\n          } else if (Object.keys(response.data[i].Amd.GPU).length > 0) {\n            _this.rigBrand[i] = \"Amd\";\n            _this.gpuNumberAmd[i] = response.data[i].Amd.GPU.length;\n            _this.coin[i] = [\"\", response.data[i].Amd.Coin];\n            _this.algo[i] = [\"\", response.data[i].Amd.Algo];\n\n            _this.getGpuInfo(i, \"Amd\", response);\n          }\n        }\n\n        _this.rigHostname = Array.from(_this.rigHostname); //console.log(this.coin, this.algo, this.hashrateNvidia, this.temperatureNvidia, this.wattNvidia, this.hashrateAmd, this.temperatureAmd, this.wattAmd, this.rigNumber, this.rigHostname, this.rigStatus, this.rigSeen, this.rigBrand)\n\n        _this.$store.state.json = response.data;\n      });\n      this.APITimer = setTimeout(this.rigInfo, 30000);\n    },\n    getGpuInfo: function getGpuInfo(i, brand, response) {\n      if (brand == \"Nvidia\") {\n        this.hashrateNvidia[i] = response.data[i].Nvidia[\"Total Hashrate\"];\n        this.temperatureNvidia[i] = response.data[i].Nvidia[\"Avg Temperature\"];\n        this.wattNvidia[i] = response.data[i].Nvidia[\"Total Watt\"];\n        var gpuHashTemp = [];\n        var gpuTempTemp = [];\n        var gpuWattTemp = [];\n        var gpuNameTemp = [];\n\n        for (var j = 0; j < response.data[i].Nvidia.GPU.length; j++) {\n          gpuHashTemp.push(response.data[i].Nvidia.GPU[j].Hashrate);\n          gpuTempTemp.push(response.data[i].Nvidia.GPU[j].Temperature);\n          gpuWattTemp.push(response.data[i].Nvidia.GPU[j].Watt);\n          gpuNameTemp.push(response.data[i].Nvidia.GPU[j].Name.replace(/GeForce GTX/, ''));\n        }\n\n        this.gpuHashrateNvidia[i] = gpuHashTemp;\n        this.gpuTemperatureNvidia[i] = gpuTempTemp;\n        this.gpuWattNvidia[i] = gpuWattTemp;\n        this.gpuNameNvidia[i] = gpuNameTemp; // console.log(this.gpuHashrateNvidia, this.gpuTemperatureNvidia, this.gpuWattNvidia, this.gpuNameNvidia)\n      } else {\n        this.hashrateAmd[i] = response.data[i].Amd[\"Total Hashrate\"];\n        this.temperatureAmd[i] = response.data[i].Amd[\"Avg Temperature\"];\n        this.wattAmd[i] = response.data[i].Amd[\"Total Watt\"];\n        var _gpuHashTemp = [];\n        var _gpuTempTemp = [];\n        var _gpuWattTemp = [];\n        var _gpuNameTemp = [];\n\n        for (var _j = 0; _j < response.data[i].Amd.GPU.length; _j++) {\n          _gpuHashTemp.push(response.data[i].Amd.GPU[_j].Hashrate);\n\n          _gpuTempTemp.push(response.data[i].Amd.GPU[_j].Temperature);\n\n          _gpuWattTemp.push(response.data[i].Amd.GPU[_j].Watt);\n\n          _gpuNameTemp.push(response.data[i].Amd.GPU[_j].Name);\n        }\n\n        this.gpuHashrateAmd[i] = _gpuHashTemp;\n        this.gpuTemperatureAmd[i] = _gpuTempTemp;\n        this.gpuWattAmd[i] = _gpuWattTemp;\n        this.gpuNameAmd[i] = _gpuNameTemp; // console.log(this.gpuHashrateAmd, this.gpuTemperatureAmd, this.gpuWattAmd, this.gpuNameAmd)\n      }\n    }\n  },\n  created: function created() {\n    if (!this.$store.state.username || !this.$store.state.password) {\n      this.$router.push('/');\n    } else {\n      console.log(\"db initialized\");\n      this.rigInfo();\n    }\n  },\n  destroyed: function destroyed() {\n    clearTimeout(this.APITimer);\n  }\n};",{"version":3,"sources":["Rigs.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-app>\n    <div class=\"background\"></div>\n    <div class=\"content\">\n      <v-layout class=\"pt-5\" row wrap>\n        <v-flex xs16 sm16 md6 lg6 v-for=\"rig in rigNumber\" :key=\"rig\" pa-4>\n          \n          <v-card v-bind:class=\"{ flashingCard: !rigStatus[rig - 1] && !disableSwitch[rig - 1] }\" v-model=\"rigHostname[rig - 1]\" class=\"fade-in rounded-card rigCard\" height=\"100%\" top=\"30%\">  \n            <h1 @click=\"rigGraph=!rigGraph\" v-bind:class=\"{ redText: !rigStatus[rig - 1] && !disableSwitch[rig - 1] }\" class=\"textColor pl-3\" style=\"text-align:left;float:left;\">{{ rigHostname[rig - 1] }}</h1> \n            <v-switch\n              style=\"text-align:left;float:left;\"\n              v-if='!rigStatus[rig - 1]'\n              v-model=\"disableSwitch[rig - 1]\"\n              color=\"red\"\n              height=0.01\n              class=\"lastSeen mt-3 ml-5\"\n              dark\n            ></v-switch>\n            <h2 v-if='!rigStatus[rig - 1]' class=\"white--text pt-1 pr-3\" style=\"text-align:right;float:right;\">{{ rigSeen[rig - 1] }} ago</h2> \n            <hr style=\"clear:both;\" color=\"#F0E296\"/>\n            \n            <div>\n              <ul v-if='rigBrand[rig - 1].includes(\"Nvidia\")' style=\"cursor: pointer\" class=\"rigUlGreen white--text\">\n                <li class=\"rigLi\" @click='hashrateOver(\"nvidia\")'>\n                  <img src=\"../assets/nvidia.png\" height=\"30\" class=\"pt-2\" fill-height>\n                </li>\n                <li class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>{{ coin[rig - 1][0] }}</li>\n                <li class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>{{ algo[rig - 1][0] }}</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>{{ hashrateNvidia[rig - 1] }}</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>{{ parseInt(temperatureNvidia[rig - 1]) }} °C</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>{{ parseInt(wattNvidia[rig - 1]) }} W</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n              </ul>\n              <v-divider color=\"#F0E296\"></v-divider>\n              <ul v-if='rigBrand[rig - 1].includes(\"Amd\")' style=\"cursor: pointer\"  class=\"rigUlRed white--text\">\n                <li class=\"rigLi\" @click='hashrateOver(\"amd\")'>\n                  <img src=\"../assets/amd.png\" height=\"30\" class=\"pt-2\" fill-height>\n                </li>\n                <li class=\"rigLi\" @click='hashrateOver(\"amd\", rig)'>{{ coin[rig - 1][1] }}</li>\n                <li class=\"rigLi\" @click='hashrateOver(\"amd\", rig)'>{{ algo[rig - 1][1] }}</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"amd\", rig)'>{{ hashrateAmd[rig - 1] }}</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"amd\", rig)'>{{ parseInt(temperatureAmd[rig - 1]) }} °C</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n                <li v-if=\"rigStatus[rig - 1]\" class=\"rigLi\" @click='hashrateOver(\"amd\", rig)'>{{ parseInt(wattAmd[rig - 1]) }} W</li>\n                <li v-else class=\"rigLi\" @click='hashrateOver(\"nvidia\", rig)'>null</li>\n              </ul>\n              <v-divider color=\"#F0E296\"></v-divider>\n\n              <div class=\"pt-2\">\n                <v-menu offset-y>\n                  <v-btn slot=\"activator\" color=\"transparent\" class=\"white--text editBtn\">Edit</v-btn>\n                  <v-list dark>\n                    <v-list-tile\n                      v-for=\"(item, index) in editList\"\n                      :key=\"index\"\n                      :to=\"{ name: 'Edit' + item, params: { id: rigHostname[rig - 1] } }\"\n                    >\n                      <v-list-tile-title>{{ item }}</v-list-tile-title>\n                    </v-list-tile>\n                  </v-list>\n                </v-menu>\n                <v-menu offset-y>\n                  <v-btn slot=\"activator\" color=\"transparent\" class=\"white--text editBtn\">Logs</v-btn>\n                  <v-list dark>\n                    <v-list-tile\n                      v-for=\"(item, index) in logsList\"\n                      :key=\"index\"\n                      :to=\"{ name: 'logs', params: { id: rigHostname[rig - 1] } }\"\n                    >\n                      <v-list-tile-title>{{ item }}</v-list-tile-title>\n                    </v-list-tile>\n                  </v-list>\n                </v-menu>\n                <v-menu offset-y>\n                  <v-btn slot=\"activator\" color=\"transparent\" class=\"white--text editBtn\">Actions</v-btn>\n                  <v-list dark>\n                    <v-list-tile\n                      v-for=\"(item, index) in actionList\"\n                      :key=\"index\"\n                      @click=\"action(index, rigHostname[rig - 1])\"\n                    >\n                      <v-list-tile-title>{{ item }}</v-list-tile-title>\n                    </v-list-tile>\n                  </v-list>\n                </v-menu>\n                <v-btn @click=\"rigGraph = !rigGraph\" color=\"transparent\" class=\"white--text editBtn\">View Graphs</v-btn>\n              </div>\n            </div>\n          </v-card>\n\n        </v-flex>\n      </v-layout>\n      \n      <v-flex xs16 sm16 md6 lg6>\n        <v-dialog v-model=\"gpuDialog\" width=\"75%\">\n          <v-card class=\"infoCard rounded-card\" color=\"black\">\n            <v-card-title v-if='brand==\"Nvidia\"' class=\"green--text headline lighten-2\" primary-title>\n            {{ brand }}\n            </v-card-title>\n            <v-card-title v-if='brand==\"Amd\"' class=\"red--text headline lighten-2\" primary-title>\n            {{ brand }}\n            </v-card-title>\n            <ul class=\"white--text gpuUl\">\n              <li class=\"gpuLi\">GPU #</li>\n              <li class=\"gpuLi\">hashrate</li>\n              <li class=\"gpuLi\">temperature</li>\n              <li class=\"gpuLi\">watt</li>\n              <li class=\"gpuLi\">name</li>                \n            </ul>\n            <v-divider color=\"#F0E296\"></v-divider>\n\n            <div v-if='brand==\"Nvidia\"'>\n              <ul v-for=\"i in gpuNumberNvidia[key - 1]\" :key=\"i\" class=\"white--text gpuUl\">\n                <li class=\"gpuLi\">{{ i }}</li>\n                <li class=\"gpuLi\">{{ gpuHashrateNvidia[key - 1][i - 1] || \"undefined\" }}</li>\n                <li class=\"gpuLi\">{{ Number(gpuTemperatureNvidia[key - 1][i - 1]).toFixed(0) || \"undefined\" }} °C</li>\n                <li class=\"gpuLi\">{{ gpuWattNvidia[key - 1][i - 1] || \"undefined\" }}</li>\n                <li class=\"gpuLi\">{{ gpuNameNvidia[key - 1][i - 1] || \"undefined\" }}</li>                \n              </ul>\n            </div>\n            <div v-if='brand==\"Amd\"'>\n              <ul v-for=\"i in gpuNumberAmd[key - 1]\" :key=\"i\" class=\"white--text gpuUl\">\n                <li class=\"gpuLi\">{{ i }}</li>\n                <li class=\"gpuLi\">{{ Number(gpuTemperatureAmd[key - 1][i - 1]).toFixed(0) || \"undefined\" }} °C</li>\n                <li class=\"gpuLi\">{{ gpuHashrateAmd[key - 1][i - 1] || \"undefined\" }}</li>\n                <li class=\"gpuLi\">{{ gpuWattAmd[key - 1][i - 1] || \"undefined\" }} W</li>\n                <li class=\"gpuLi\">{{ gpuNameAmd[key - 1][i - 1] || \"undefined\" }}</li>\n              </ul>\n            </div>\n          </v-card>      \n        </v-dialog>\n      </v-flex>\n\n      <v-flex xs16 sm16 md6 lg6>\n        <v-dialog v-model=\"rigGraph\" width=\"75%\">\n          <v-card class=\"infoCard rounded-card\" color=\"black\">\n            <h1 class=\"white--text\">Grafana Graphs</h1>\n          </v-card>      \n        </v-dialog>\n      </v-flex>\n\n    </div>\n  </v-app>\n</template>\n\n<script>\nconst axios = require('axios');\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      url: 'https://nos-server.now.sh/db/',\n      i: 0,\n      disableSwitch: [],\n\n      coin: [],\n      algo: [],\n      timeDifference: [],\n      rigNumber: [],\n      rigSeen: [],\n      rigHostname: [],\n      rigStatus: [],\n      rigBrand: [],\n      rigSSH: null,\n\n      hashrateNvidia: [],\n      hashrateAmd: [],\n      temperatureNvidia: [],\n      temperatureAmd: [],\n      wattNvidia: [],\n      wattAmd: [],\n      \n      gpuNumberNvidia: [],\n      gpuUtilizationNvidia: [],\n      gpuHashrateNvidia: [],\n      gpuTemperatureNvidia: [], \n      gpuWattNvidia: [], \n      gpuCClockNvidia: [], \n      gpuMClockNvidia: [],\n      gpuNameNvidia: [],\n\n      gpuNumberAmd: [],\n      gpuUtilizationAmd: [],\n      gpuHashrateAmd: [],\n      gpuTemperatureAmd: [], \n      gpuWattAmd: [], \n      gpuCClockAmd: [], \n      gpuMClockAmd: [], \n      gpuNameAmd: [],\n\n      brand: undefined,\n      gpuDialog: false,\n      rigGraph: false,\n      key: 0,\n\n      editList: [\"System\", \"Coins\", \"Overclocks\"],\n      logsList: [\"Miners\"],\n      actionList: [\"SSH\", \"Restart nOS\", \"Restart Rig\", \"Shutdown Rig\"],\n\n      APITimer: undefined\n    };\n  },\n  methods: {\n    createCmdObject(hostname, cmd) {\n      return {\n        \"username\": this.$store.state.username,\n        \"password\": this.$store.state.password,\n        \"hostname\": hostname,\n        \"command\": cmd\n      }\n    },\n    action(index, hostname) {\n      if (index == 0) {\n        let win = window.open(this.rigSSH, '_noblank')\n        win.focus()\n      } else if (index == 1) {\n        axios.post('http://localhost:5000/command', this.createCmdObject(hostname, 'start'))\n      } else if (index == 2) {\n        axios.post('http://localhost:5000/command', this.createCmdObject(hostname, 'sudo shutdown -r now'))\n      } else if (index == 2) {\n        axios.post('http://localhost:5000/command', this.createCmdObject(hostname, 'sudo shutdown now'))\n      }\n    },\n    hashrateOver(brand, key) {\n      this.gpuDialog = !this.gpuDialog\n      if (brand == \"nvidia\") {\n        this.brand = \"Nvidia\"\n        this.key = key\n      } else {\n        this.brand = \"Amd\"\n        this.key = key\n      }\n    },\n    returnToDefaults() {\n      this.timeDifference = [],\n      this.rigNumber = [],\n      this.rigSeen = [],\n      this.rigHostname = [],\n      this.rigStatus = [],\n      this.rigBrand = [],\n      this.rigSSH = null,\n\n      this.hashrateNvidia = [],\n      this.hashrateAmd = [],\n      this.temperatureNvidia = [],\n      this.temperatureAmd = [],\n      this.wattNvidia = [],\n      this.wattAmd = [],\n      \n      this.gpuNumberNvidia = [],\n      this.gpuUtilizationNvidia = [],\n      this.gpuHashrateNvidia = [],\n      this.gpuTemperatureNvidia = [], \n      this.gpuWattNvidia = [], \n      this.gpuCClockNvidia = [], \n      this.gpuMClockNvidia = [],\n      this.gpuNameNvidia = [],\n\n      this.gpuNumberAmd = [],\n      this.gpuUtilizationAmd = [],\n      this.gpuHashrateAmd = [],\n      this.gpuTemperatureAmd = [], \n      this.gpuWattAmd = [], \n      this.gpuCClockAmd = [], \n      this.gpuMClockAmd = [], \n      this.gpuNameAmd = [], \n      \n      this.brand = undefined,\n      this.gpuDialog = false\n    },\n    rigInfo() {\n      this.returnToDefaults()\n\n      axios\n        .get(this.url + this.$store.state.username + '/' + this.$store.state.password)\n        .then(response => {\n          console.log(response.data)\n\n          this.rigHostname = new Set()\n          for (let i = 0; i < response.data.length; i++) {\n            this.rigHostname.add(response.data[i].Hostname)\n            this.rigSSH = response.data[i].Shellinabox\n            this.rigNumber.push(i + 1)\n\n            let now = + new Date()\n            this.timeDifference[i] = now - response.data[i][\"New Time\"]\n            if (this.timeDifference[i] < 1 * 60 * 1000) {\n              this.rigStatus[i] = true\n              this.rigSeen[i] = \"< 30 secs\"\n            } else {\n              this.rigStatus[i] = false\n              let time = this.timeDifference[i]\n              time = Math.round(time / 1000 / 60)\n              this.rigSeen[i] = \"> \" + time + \" mins\"\n            }\n            \n            if (Object.keys(response.data[i].Nvidia.GPU).length > 0 && Object.keys(response.data[i].Amd.GPU).length > 0) {\n              this.rigBrand[i] = [\"Nvidia\", \"Amd\"]\n              this.gpuNumberNvidia[i] = response.data[i].Nvidia.GPU.length\n              this.gpuNumberAmd[i] = response.data[i].Amd.GPU.length\n              this.coin[i] = [response.data[i].Nvidia.Coin, response.data[i].Amd.Coin]\n              this.algo[i] = [response.data[i].Nvidia.Algo, response.data[i].Amd.Algo]\n              this.getGpuInfo(i, \"Nvidia\", response)\n              this.getGpuInfo(i, \"Amd\", response)\n            } else if (Object.keys(response.data[i].Nvidia.GPU).length > 0) {\n              this.rigBrand[i] = \"Nvidia\"\n              this.gpuNumberNvidia[i] = response.data[i].Nvidia.GPU.length\n              this.coin[i] = [response.data[i].Nvidia.Coin]\n              this.algo[i] = [response.data[i].Nvidia.Algo]\n              this.getGpuInfo(i, \"Nvidia\", response)\n            } else if (Object.keys(response.data[i].Amd.GPU).length > 0) {\n              this.rigBrand[i] = \"Amd\"\n              this.gpuNumberAmd[i] = response.data[i].Amd.GPU.length\n              this.coin[i] = [\"\", response.data[i].Amd.Coin]\n              this.algo[i] = [\"\", response.data[i].Amd.Algo]\n              this.getGpuInfo(i, \"Amd\", response)\n            }\n          }\n          this.rigHostname = Array.from(this.rigHostname)\n          //console.log(this.coin, this.algo, this.hashrateNvidia, this.temperatureNvidia, this.wattNvidia, this.hashrateAmd, this.temperatureAmd, this.wattAmd, this.rigNumber, this.rigHostname, this.rigStatus, this.rigSeen, this.rigBrand)\n          this.$store.state.json = response.data\n        })\n      this.APITimer = setTimeout(this.rigInfo, 30000)\n    },\n    getGpuInfo(i, brand, response) {\n      if (brand == \"Nvidia\") {\n        this.hashrateNvidia[i] = response.data[i].Nvidia[\"Total Hashrate\"]\n        this.temperatureNvidia[i] = response.data[i].Nvidia[\"Avg Temperature\"]\n        this.wattNvidia[i] = response.data[i].Nvidia[\"Total Watt\"]\n        \n        let gpuHashTemp = []\n        let gpuTempTemp = []\n        let gpuWattTemp = []\n        let gpuNameTemp = []\n        for (let j = 0; j < response.data[i].Nvidia.GPU.length; j++) {\n          gpuHashTemp.push(response.data[i].Nvidia.GPU[j].Hashrate)\n          gpuTempTemp.push(response.data[i].Nvidia.GPU[j].Temperature)\n          gpuWattTemp.push(response.data[i].Nvidia.GPU[j].Watt)\n          gpuNameTemp.push((response.data[i].Nvidia.GPU[j].Name).replace(/GeForce GTX/, ''))   \n        }\n        this.gpuHashrateNvidia[i] = gpuHashTemp\n        this.gpuTemperatureNvidia[i] = gpuTempTemp\n        this.gpuWattNvidia[i] = gpuWattTemp\n        this.gpuNameNvidia[i] = gpuNameTemp\n        // console.log(this.gpuHashrateNvidia, this.gpuTemperatureNvidia, this.gpuWattNvidia, this.gpuNameNvidia)\n      } else {\n        this.hashrateAmd[i] = response.data[i].Amd[\"Total Hashrate\"]\n        this.temperatureAmd[i] = response.data[i].Amd[\"Avg Temperature\"]\n        this.wattAmd[i] = response.data[i].Amd[\"Total Watt\"]\n      \n        let gpuHashTemp = []\n        let gpuTempTemp = []\n        let gpuWattTemp = []\n        let gpuNameTemp = []\n        for (let j = 0; j < response.data[i].Amd.GPU.length; j++) {\n          gpuHashTemp.push(response.data[i].Amd.GPU[j].Hashrate)\n          gpuTempTemp.push(response.data[i].Amd.GPU[j].Temperature)\n          gpuWattTemp.push(response.data[i].Amd.GPU[j].Watt)\n          gpuNameTemp.push(response.data[i].Amd.GPU[j].Name) \n        }\n        this.gpuHashrateAmd[i] = gpuHashTemp\n        this.gpuTemperatureAmd[i] = gpuTempTemp\n        this.gpuWattAmd[i] = gpuWattTemp\n        this.gpuNameAmd[i] = gpuNameTemp\n        // console.log(this.gpuHashrateAmd, this.gpuTemperatureAmd, this.gpuWattAmd, this.gpuNameAmd)\n      }\n    }\n  },\n  created() {\n    if (!this.$store.state.username || !this.$store.state.password) {\n      this.$router.push('/')\n    } else {\n      console.log(\"db initialized\")\n      this.rigInfo()\n    }\n  },\n  destroyed() {\n    clearTimeout(this.APITimer);\n  }\n}\n\n</script>\n\n<style scoped>\n.textColor{\n  color: white;\n}\n.editBtn{\n  top: -5px;\n  left: 10px\n}\n.infoCard {\n  margin-left: auto;\n  margin-right: auto;\n}\n.rounded-card {\n  border-radius:30px;\n}\n.rigCard{\n  border: 5px solid rgb(240, 226, 150);\n  background:rgba(255,255,255,0.10);\n}\n.rigCard:hover{\n  box-shadow: 0 28px 36px rgba(240, 226, 150,0.25), 0 10px 10px rgba(240, 226, 150,0.22);\n}\n.gpuUl {\n  background: black;\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  display: table;\n}\n.gpuLi {\n  width: 20%;\n  text-decoration: none;\n  letter-spacing: 0.10em;\n  display: inline-block;\n  padding: 2px 15px;\n  position: relative;\n  color: white;\n}\n.rigUlGreen {\n  z-index: 9999;\n  display: table;\n  margin: 0;\n}\n.rigUlGreen:hover { \n  width: 100%;\n  background-color: rgba(154, 205, 50, 0.5); \n}\n.rigUlRed {\n  z-index: 9999;\n  display: table;\n  margin: 0;\n}\n.rigUlRed:hover { \n  width: 100%;\n  background-color: rgba(223, 3, 3, 0.5); \n}\n.rigLi {\n  text-decoration: none;\n  width: 80px;\n  display: inline-block;\n  position: relative;\n  text-align: center;\n}\n.span-text {\n  vertical-align:50%;\n}\n\n.fade-in {\n\t-webkit-animation: fade-in 1.2s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\n\t        animation: fade-in 1.2s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;\n}\n@-webkit-keyframes fade-in {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes fade-in {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n.redText{\n  animation: flashingRed 1s infinite;\n}\n@keyframes flashingRed {\n  0% { color: red; }\n  25% { color: white; }\n  50% { color: red; }\n  75% { color: white; }\n  100% { color: red; }\n\n}\n.flashingCard {\n\t-webkit-animation: vibrate-1 0.3s linear infinite both;\n\t        animation: vibrate-1 0.3s linear infinite both;\n}\n@-webkit-keyframes vibrate-1 {\n  0% {\n    -webkit-transform: translate(0);\n            transform: translate(0);\n  }\n  20% {\n    -webkit-transform: translate(-2px, 2px);\n            transform: translate(-2px, 2px);\n  }\n  40% {\n    -webkit-transform: translate(-2px, -2px);\n            transform: translate(-2px, -2px);\n  }\n  60% {\n    -webkit-transform: translate(2px, 2px);\n            transform: translate(2px, 2px);\n  }\n  80% {\n    -webkit-transform: translate(2px, -2px);\n            transform: translate(2px, -2px);\n  }\n  100% {\n    -webkit-transform: translate(0);\n            transform: translate(0);\n  }\n}\n@keyframes vibrate-1 {\n  0% {\n    -webkit-transform: translate(0);\n            transform: translate(0);\n  }\n  20% {\n    -webkit-transform: translate(-2px, 2px);\n            transform: translate(-2px, 2px);\n  }\n  40% {\n    -webkit-transform: translate(-2px, -2px);\n            transform: translate(-2px, -2px);\n  }\n  60% {\n    -webkit-transform: translate(2px, 2px);\n            transform: translate(2px, 2px);\n  }\n  80% {\n    -webkit-transform: translate(2px, -2px);\n            transform: translate(2px, -2px);\n  }\n  100% {\n    -webkit-transform: translate(0);\n            transform: translate(0);\n  }\n}\n</style>\n\n"],"sourceRoot":"src/views"}]}