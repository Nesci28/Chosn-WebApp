{"remainingRequest":"/home/nos/Webapp/client/node_modules/thread-loader/dist/cjs.js!/home/nos/Webapp/client/node_modules/babel-loader/lib/index.js!/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nos/Webapp/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nos/Webapp/client/src/views/Logs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/nos/Webapp/client/src/views/Logs.vue","mtime":1556115090450},{"path":"/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/nos/Webapp/client/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar axios = require('axios');\n\nvar Anser = require('anser');\n\nexport default {\n  name: 'App',\n  data: function data() {\n    return {\n      id: 0,\n      urlGet: '',\n      logs: {\n        \"Nvidia\": null,\n        \"Amd\": null,\n        \"error\": null\n      },\n      loading: true\n    };\n  },\n  methods: {\n    logsParser: function logsParser(logs) {\n      var logsArr = [];\n      logs = logs.split('\\n');\n      logs.forEach(function (log) {\n        logsArr.push(Anser.ansiToHtml(log));\n      });\n      return logsArr.join(\"<br />\");\n    },\n    minerLogs: function () {\n      var _minerLogs = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.post(this.urlGet);\n\n              case 2:\n                response = _context.sent;\n                this.id = this.$route.params.id;\n                this.logs.Nvidia = response.data.filter(function (ele) {\n                  return ele[\"Hostname\"] == _this.id;\n                })[0].Nvidia[\"Miner Log\"];\n                this.logs.Amd = response.data.filter(function (ele) {\n                  return ele[\"Hostname\"] == _this.id;\n                })[0].Amd[\"Miner Log\"]; // console.log(this.id, nvidiaLogs, amdLogs)\n\n                if (this.logs.Nvidia) {\n                  this.logs.Nvidia = this.logsParser(this.logs.Nvidia);\n                }\n\n                if (this.logs.Amd) {\n                  this.logs.Amd = this.logsParser(this.logs.Amd);\n                }\n\n                if (!this.logs.Nvidia && !this.logs.Amd) this.logs.error = \"Error - No logs detected!\";\n                this.APITimer = setTimeout(this.minerLogs, 30000);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function minerLogs() {\n        return _minerLogs.apply(this, arguments);\n      }\n\n      return minerLogs;\n    }()\n  },\n  created: function created() {\n    var _this2 = this;\n\n    if (window.location.href.includes('localhost')) {\n      this.urlGet = \"http://localhost:5000/db\";\n    } else if (window.location.href.includes('192.168')) {\n      this.urlGet = \"http://192.168.0.127:5000/db\";\n    } else {\n      this.urlGet = \"https://nos-server.now.sh/db\";\n    }\n\n    this.loading = true;\n    axios.post(this.urlGet).then(function (res) {\n      _this2.loading = false;\n      if (res.data == \"not logged in!\") _this2.$router.push('/');else _this2.minerLogs();\n    });\n  },\n  destroyed: function destroyed() {\n    clearTimeout(this.APITimer);\n  }\n};",{"version":3,"sources":["Logs.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-app>\n    <div class=\"background\"></div>\n      <v-progress-circular\n        :size=\"140\"\n        :width=\"14\"\n        v-if=\"loading\"\n        indeterminate\n        color=\"rgb(240, 226, 150)\"\n        class=\"middle\"\n      ></v-progress-circular>\n      <span v-if=\"logs.Nvidia\" v-html=\"logs.Nvidia\" class=\"text pa-5\">Nvidia</span>\n      <span v-if=\"logs.Amd\" v-html=\"logs.Amd\" class=\"text pa-5\"></span>\n      <span v-if=\"logs.error\" class=\"text pa-5\">Error - no logs detected</span>\n  </v-app>\n</template>\n\n<script>\nconst axios = require('axios');\nconst Anser = require('anser');\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      id: 0,\n      urlGet: '',\n      logs: {\n        \"Nvidia\": null,\n        \"Amd\": null,\n        \"error\": null\n      },\n      loading: true\n    }\n  },\n  methods: {\n    logsParser(logs) {\n      let logsArr = []\n      logs = logs.split('\\n')\n      logs.forEach(log => {\n        logsArr.push(Anser.ansiToHtml(log))\n      })\n      return logsArr.join(\"<br />\")\n    },\n    async minerLogs() {\n      let response = await axios.post(this.urlGet)\n      this.id = this.$route.params.id\n      this.logs.Nvidia = response.data.filter(ele => ele[\"Hostname\"] == this.id)[0].Nvidia[\"Miner Log\"]\n      this.logs.Amd = response.data.filter(ele => ele[\"Hostname\"] == this.id)[0].Amd[\"Miner Log\"]\n      // console.log(this.id, nvidiaLogs, amdLogs)\n      if (this.logs.Nvidia) {\n        this.logs.Nvidia = this.logsParser(this.logs.Nvidia)\n      }\n      if (this.logs.Amd) {\n        this.logs.Amd = this.logsParser(this.logs.Amd)\n      }\n      if (!this.logs.Nvidia && !this.logs.Amd) this.logs.error = \"Error - No logs detected!\"\n      this.APITimer = setTimeout(this.minerLogs, 30000)\n    }\n  },\n  created() {\n    if (window.location.href.includes('localhost')) {\n      this.urlGet = \"http://localhost:5000/db\"\n    } else if (window.location.href.includes('192.168')) {\n      this.urlGet = \"http://192.168.0.127:5000/db\"\n    } else {\n      this.urlGet = \"https://nos-server.now.sh/db\"\n    }\n\n    this.loading = true\n    axios.post(this.urlGet)\n      .then(res => {\n        this.loading = false\n        if (res.data == \"not logged in!\") this.$router.push('/')\n        else this.minerLogs()\n    })\n  },\n  destroyed() {\n    clearTimeout(this.APITimer);\n  }\n}\n</script>\n\n<style scoped>\n.text{\n  padding: 10%;\n  margin: 5%;\n  width: 90%;\n  border: 5px solid white;\n  background: rgba(0,0,0,0.75);\n  color: white;\n  z-index: 1;\n}\n</style>\n\n"],"sourceRoot":"src/views"}]}