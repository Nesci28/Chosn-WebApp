{"remainingRequest":"/home/nos/Webapp/client/node_modules/thread-loader/dist/cjs.js!/home/nos/Webapp/client/node_modules/babel-loader/lib/index.js!/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nos/Webapp/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nos/Webapp/client/src/views/Logs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/nos/Webapp/client/src/views/Logs.vue","mtime":1555259939024},{"path":"/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nos/Webapp/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\nvar axios = require('axios');\n\nvar Anser = require(\"anser\");\n\nexport default {\n  name: 'App',\n  data: function data() {\n    return {\n      id: 0,\n      logs: {\n        \"Nvidia\": null,\n        \"Amd\": null,\n        \"error\": \"No logs detected\"\n      }\n    };\n  },\n  methods: {\n    logsParser: function logsParser(logs) {\n      var logsArr = [];\n      logs = logs.split('\\n');\n      logs.forEach(function (log) {\n        logsArr.push(Anser.ansiToHtml(log));\n      });\n      return logsArr.join(\"<br />\");\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    if (!this.$store.state.username || !this.$store.state.password) {\n      this.$router.push('/');\n    } else {\n      this.id = this.$route.params.id;\n      this.logs.Nvidia = this.$store.state.json.filter(function (ele) {\n        return ele[\"Hostname\"] == _this.id;\n      })[0].Nvidia[\"Miner Log\"];\n      this.logs.Amd = this.$store.state.json.filter(function (ele) {\n        return ele[\"Hostname\"] == _this.id;\n      })[0].Amd[\"Miner Log\"]; // console.log(this.id, nvidiaLogs, amdLogs)\n\n      if (this.logs.Nvidia) {\n        this.logs.Nvidia = this.logsParser(this.logs.Nvidia);\n      }\n\n      if (this.logs.Amd) {\n        this.logs.Amd = this.logsParser(this.logs.Amd);\n      }\n    }\n  }\n};",{"version":3,"sources":["Logs.vue"],"names":[],"mappings":";;;;;;;;;AAUA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,EAAA,EAAA,CADA;AAEA,MAAA,IAAA,EAAA;AACA,kBAAA,IADA;AAEA,eAAA,IAFA;AAGA,iBAAA;AAHA;AAFA,KAAA;AAQA,GAXA;AAYA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,sBACA,IADA,EACA;AACA,UAAA,OAAA,GAAA,EAAA;AACA,MAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,MAAA,IAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA,GAAA,CAAA;AACA,OAFA;AAGA,aAAA,OAAA,CAAA,IAAA,CAAA,QAAA,CAAA;AACA;AARA,GAZA;AAsBA,EAAA,OAtBA,qBAsBA;AAAA;;AACA,QAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,QAAA,IAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,QAAA,EAAA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA,GAAA;AACA,KAFA,MAEA;AACA,WAAA,EAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,EAAA;AACA,WAAA,IAAA,CAAA,MAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,UAAA,GAAA;AAAA,eAAA,GAAA,CAAA,UAAA,CAAA,IAAA,KAAA,CAAA,EAAA;AAAA,OAAA,EAAA,CAAA,EAAA,MAAA,CAAA,WAAA,CAAA;AACA,WAAA,IAAA,CAAA,GAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,UAAA,GAAA;AAAA,eAAA,GAAA,CAAA,UAAA,CAAA,IAAA,KAAA,CAAA,EAAA;AAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,WAAA,CAAA,CAHA,CAIA;;AACA,UAAA,KAAA,IAAA,CAAA,MAAA,EAAA;AACA,aAAA,IAAA,CAAA,MAAA,GAAA,KAAA,UAAA,CAAA,KAAA,IAAA,CAAA,MAAA,CAAA;AACA;;AACA,UAAA,KAAA,IAAA,CAAA,GAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,GAAA,KAAA,UAAA,CAAA,KAAA,IAAA,CAAA,GAAA,CAAA;AACA;AACA;AACA;AArCA,CAAA","sourcesContent":["<template>\n  <v-app>\n    <div class=\"background\"></div>\n      <span v-if=\"logs.Nvidia\" v-html=\"logs.Nvidia\" class=\"text pa-5\">Nvidia</span>\n      <span v-if=\"logs.Amd\" v-html=\"logs.Amd\" class=\"text pa-5\"></span>\n      <span v-if=\"!logs.Nvidia && !logs.Amd\" class=\"text pa-5\">Error - no logs detected</span>\n  </v-app>\n</template>\n\n<script>\nconst axios = require('axios');\nconst Anser = require(\"anser\");\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      id: 0,\n      logs: {\n        \"Nvidia\": null,\n        \"Amd\": null,\n        \"error\": \"No logs detected\"\n      },\n    }\n  },\n  methods: {\n    logsParser(logs) {\n      let logsArr = []\n      logs = logs.split('\\n')\n      logs.forEach(log => {\n        logsArr.push(Anser.ansiToHtml(log))\n      })\n      return logsArr.join(\"<br />\")\n    }\n  },\n  created() {\n    if (!this.$store.state.username || !this.$store.state.password) {\n      this.$router.push('/')\n    } else {\n      this.id = this.$route.params.id\n      this.logs.Nvidia = this.$store.state.json.filter(ele => ele[\"Hostname\"] == this.id)[0].Nvidia[\"Miner Log\"]\n      this.logs.Amd = this.$store.state.json.filter(ele => ele[\"Hostname\"] == this.id)[0].Amd[\"Miner Log\"]\n      // console.log(this.id, nvidiaLogs, amdLogs)\n      if (this.logs.Nvidia) {\n        this.logs.Nvidia = this.logsParser(this.logs.Nvidia)\n      }\n      if (this.logs.Amd) {\n        this.logs.Amd = this.logsParser(this.logs.Amd)\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.text{\n  padding: 10%;\n  margin: 5%;\n  width: 90%;\n  border: 5px solid white;\n  background: rgba(0,0,0,0.75);\n  color: white;\n  z-index: 1;\n}\n</style>\n\n"],"sourceRoot":"src/views"}]}